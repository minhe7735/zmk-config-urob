#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define SYM 1
#define NUM 2
#define FN 3

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24  
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33 34 35 36

&sk {
    release-after-ms = <600>;
    quick-release;
};

&sl { ignore-modifiers; };

&mt { flavor = "tap-preferred"; };

&mmv { time-to-max-speed-ms = <1500>; };

&msc { time-to-max-speed-ms = <5000>; };

/ {
    chosen { zmk,physical-layout = &foostan_corne_5col_layout; };

  combos {
    compatible = "zmk,combos";
    combo_normal {
      timeout-ms = <20>;
      key-positions = <7 8>;
      bindings = <&to DEF>;
    };

    combo_fn {
      timeout-ms = <20>;
      key-positions = <27 28>;
      bindings = <&sl FN>;
    };
    combo_esc {
      timeout-ms = <20>;
      key-positions = <1 2>;
      bindings = <&kp ESCAPE>;
    };
    combo_tab {
      timeout-ms = <20>;
      key-positions = <2 3>;
      bindings = <&kp TAB>;
    };
    combo_cdel {
      timeout-ms = <20>;
      key-positions = <11 12>;
      bindings = <&kp LC(BACKSPACE)>;
    };
    combo_unlock {
      timeout-ms = <20>;
      key-positions = <0 4>;
      bindings = <&studio_unlock>;
    };
    combo_reset_left {
      timeout-ms = <20>;
      key-positions = <20 24>;
      bindings = <&sys_reset>;
    };
    combo_reset_right {
      timeout-ms = <20>;
      key-positions = <25 29>;
      bindings = <&sys_reset>;
    };
  };

    macros {
        cml: cml {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_press &mmv MOVE_LEFT &kp RCTRL>,
                <&macro_pause_for_release>,
                <&macro_release &mmv MOVE_LEFT &kp RCTRL>;
            label = "CML";
        };

        smd: smd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_press &mmv MOVE_DOWN &kp RSHFT>,
                <&macro_pause_for_release>,
                <&macro_release &mmv MOVE_DOWN &kp RSHFT>;
            label = "SMD";
        };

        amr: amr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings =
                <&macro_press &mmv MOVE_RIGHT &kp RALT>,
                <&macro_pause_for_release>,
                <&macro_release &mmv MOVE_RIGHT &kp RALT>;
            label = "AMR";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <150>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };

        hmr_cml: hmr_cml {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_CML";
            bindings = <&cml>, <&kp>;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };

        hmr_smd: hmr_smd {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_SMD";
            bindings = <&smd>, <&kp>;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };

        hmr_amr: hmr_amr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_AMR";
            bindings = <&amr>, <&kp>;
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <250>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };

        mt_mouse: mt_mouse {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_MOUSE";
            flavor = "tap-preferred";
            bindings = <&mmv>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        mt_wheel: mt_wheel {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_WHEEL";
            flavor = "tap-preferred";
            bindings = <&msc>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        base {
            bindings = <
&kp FSLH       &kp W          &kp F           &kp P                &kp B          &mt_wheel SCRL_UP J    &mt_wheel SCRL_LEFT L  &mt_mouse MOVE_UP U  &mt_wheel SCRL_RIGHT Y  &kp SEMI
&hml LGUI A    &hml LALT R    &hml LSHFT S    &hml LCTRL T         &kp G          &mt_wheel SCRL_DOWN M  &hmr_cml 0 N           &hmr_smd 0 E         &hmr_amr 0 I            &hmr RIGHT_GUI O
&kp Z          &kp X           &kp C          &kp D                &kp V          &kp K                  &kp H                  &kp COMMA            &kp DOT                 &kp Q           
                           &mkp LCLK  &smart_shift  &lt SYM SPACE    &lt NUM BACKSPACE        &mt LS(LC(LEFT_ALT)) ENTER              &mkp RCLK
            >;
        };
    Sym {
      bindings = <
        &none    &none    &kp LEFT_BRACE          &kp RIGHT_BRACE          &kp PIPE         &kp GRAVE    &kp TILDE    &kp LESS_THAN    &kp GREATER_THAN    &kp BACKSLASH        
        &none    &none    &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS    &kp COLON        &kp PLUS     &kp MINUS    &kp SLASH        &kp ASTRK           &kp SINGLE_QUOTE    
        &none    &none    &kp LEFT_BRACKET        &kp RIGHT_BRACKET        &kp QUESTION     &kp AMPS     &kp EQUAL    &kp UNDER        &kp PERIOD          &kp DOUBLE_QUOTES  
        &none                   &none                    &trans           &none        &none    &none                                                                 
      >;
    };
    Num {
      bindings = <
        &none      &kp N7          &kp N8           &kp N9           &none            &none              &kp PG_UP          &kp UP             &kp PG_DN          &none          
        &kp LGUI   &hml LALT N4    &hml LSHFT N5    &hml LCTRL N6    &none            &none              &hmr RCTRL LEFT    &hmr RSHFT DOWN    &hmr RALT RIGHT    &kp RGUI     
        &none      &kp N1          &kp N2           &kp N3           &kp LC(MINUS)    &kp LC(EQUAL)      &kp HOME           &trans             &kp END            &none          
        &kp DOT         &kp N0           &kp LS(LC(LEFT_ALT))    &trans              &none  &none
      >;
    };
    Fun {
      bindings = <
        &kp LC(LA(DEL))    &kp F7    &kp F8    &kp F9         &kp F10        &none         &none           &none           &none           &none             
        &none              &kp F4    &kp F5    &kp F6         &kp F11        &none         &kp LCTRL     &kp LSHFT       &kp LALT        &kp LGUI         
        &none              &kp F1    &kp F2    &kp F3         &kp F12        &none         &none           &out OUT_TOG    &none           &none  
        &none     &none &none &none &none  &none
      >;
    };
};
