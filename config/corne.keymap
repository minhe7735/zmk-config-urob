#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <600>;
    quick-release;
};

&sl { ignore-modifiers; };

&mt { flavor = "tap-preferred"; };

&mmv { time-to-max-speed-ms = <1500>; };

&msc { time-to-max-speed-ms = <5000>; };

/ {
    chosen { zmk,matrix_transform = &default_transform; };

    combos {
        compatible = "zmk,combos";

        normal {
            bindings = <&to 4>;
            key-positions = <8 9>;
        };

        function {
            bindings = <&sl 3>;
            key-positions = <32 33>;
        };

        game {
            bindings = <&to 0>;
            key-positions = <6 10>;
        };

        move_window {
            bindings = <&kp LG(LS(LEFT))>;
            key-positions = <2 3>;
        };
    };

    macros {
        cml: cml {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mmv MOVE_LEFT &kp RCTRL>,
                <&macro_pause_for_release>,
                <&macro_release>;

            label = "CML";
        };

        smd: smd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mmv MOVE_DOWN &kp RSHFT>,
                <&macro_pause_for_release>,
                <&macro_release>;

            label = "SMD";
        };

        amr: amr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mmv MOVE_RIGHT &kp RALT>,
                <&macro_pause_for_release>,
                <&macro_release>;

            label = "AMR";
        };
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <150>;
            hold-trigger-key-positions = <6 7 8 10 9 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hmr_cml: hmr_cml {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_CML";
            bindings = <&cml>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hmr_smd: hmr_smd {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_SMD";
            bindings = <&smd>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hmr_amr: hmr_amr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_AMR";
            bindings = <&amr>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        mt_mouse: mt_mouse {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_MOUSE";
            bindings = <&mmv>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        mt_wheel: mt_wheel {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_WHEEL";
            bindings = <&msc>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp ESC   &kp FSLH  &kp W  &kp F  &kp P         &kp B          &mt_wheel SCROLL_UP J    &mt_wheel SCROLL_LEFT L  &mt_mouse MOVE_UP U  &mt_wheel SCROLL_LEFT Y  &kp SEMI          &kp LC(BSPC)
&kp BSPC  &kp A     &kp R  &kp S  &kp T         &kp G          &mt_wheel SCROLL_DOWN M  &hmr_cml 0 N             &hmr_smd 0 E         &hmr_amr 0 I             &hmr RIGHT_GUI O  &kp LS(TAB)
&kp TAB   &kp Z     &kp X  &kp C  &kp D         &kp V          &kp K                    &kp H                    &kp COMMA            &kp DOT                  &kp Q             &kp C_VOL_UP
                           &none  &smart_shift  &lt 1 SPACE    &lt 2 BACKSPACE          &kp ENTER                &none
            >;
        };

        sybmol {
            bindings = <
&none  &none  &none  &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(PIPE)     &kp GRAVE     &kp LS(TILDE)  &kp LS(LT)     &kp LS(GT)    &kp BSLH     &none
&none  &none  &none  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(COLON)    &kp LS(PLUS)  &kp MINUS      &kp FSLH       &kp LS(STAR)  &kp SQT      &none
&none  &none  &none  &kp LBKT      &kp RBKT      &kp LS(QMARK)    &kp LS(AMPS)  &kp EQUAL      &kp LS(UNDER)  &kp DOT       &kp LS(DQT)  &none
                     &none         &none         &none            &none         &none          &none
            >;
        };

        number {
            bindings = <
&none  &none         &kp N7        &kp N8         &kp N9         &none            &none          &kp PG_UP        &kp UP          &kp PG_DN        &none          &none
&none  &kp LEFT_GUI  &hml LALT N4  &hml LSHFT N5  &hml LCTRL N6  &none            &none          &hmr RCTRL LEFT  &hmr RALT DOWN  &hmr RALT RIGHT  &kp RIGHT_GUI  &none
&none  &none         &kp N1        &kp N2         &kp N3         &kp LC(MINUS)    &kp LC(EQUAL)  &kp HOME         &none           &kp END          &none          &none
                                   &none          &kp N0         &none            &none          &none            &none
            >;
        };

        function {
            bindings = <
&none  &none  &kp F7  &kp F8  &kp F9  &kp F10    &none       &none         &none         &none         &none         &none
&none  &none  &kp F4  &kp F5  &kp F6  &kp F11    &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none
&none  &none  &kp F1  &kp F2  &kp F3  &kp F12    &none       &none         &none         &none         &none         &none
                      &none   &none   &none      &none       &none         &none
            >;
        };

        game {
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E     &kp R      &kp T    &none  &none  &none  &none  &none  &none
&kp LCTRL  &kp A  &kp S  &kp D     &kp F      &kp G    &none  &none  &none  &none  &none  &none
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B    &none  &none  &none  &none  &none  &none
                         &kp LALT  &kp SPACE  &kp M    &none  &none  &none
            >;
        };
    };
};
