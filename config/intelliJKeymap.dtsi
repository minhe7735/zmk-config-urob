//  buildProjects:
 #define newInThisDirectory lc(la(INS))
 #define buildProject lc(F9)
 #define rebuild lc(ls(F9))
  
//  basicEditing:
 #define cut lc(X)
 #define copy lc(C)
 #define paste lc(V)
 #define pasteAsPlainText lc(la(ls(V)))
 #define pasteFromHistory lc(ls(V))
 #define copyPaths lc(ls(C))
 #define copyReference lc(la(ls(C)))
 #define saveAll lc(S)
 #define undo lc(Z)
 #define redo lc(ls(Z))
 #define indentSelection TAB
 #define unindentLineOrSelection ls(TAB)
 #define autoIndentLines lc(la(I))
 #define startNewLine ls(ENTER)
 #define startNewLineBeforeCurrent lc(la(ENTER))
 #define deleteLine lc(Y)
 #define joinLines lc(ls(J))
 #define duplicateLineOrSelection lc(D)
 #define toggleCase lc(ls(U))
 #define scratchFile lc(la(ls(INS)))
 #define openSourceInNewWindow ls(F4)
 #define increaseFontSizeInAllEditors la(ls(DOT))
 #define decreaseFontSizeInAllEditors la(ls(COMMA))
  
//  caretNavigation:
 #define moveCaretToPreviousWord lc(LEFT)
 #define moveCaretToNextWord lc(RIGHT)
 #define moveCaretToLineStart HOME
 #define moveCaretToLineEnd END
 #define moveCaretToMatchingBrace lc(ls(M))
 #define moveCaretToCodeBlockStart lc(LBKT)
 #define moveCaretToCodeBlockEnd lc(RBKT)
 #define nextMethod la(DOWN)
 #define previousMethod la(UP)
 #define moveCaretToPageTop lc(PG_UP)
 #define moveCaretToPageBottom lc(PG_DN)
 #define pageUp PG_UP
 #define pageDown PG_DN
 #define moveCaretToTextStart lc(HOME)
 #define moveCaretToTextEnd lc(END)
  
//  selectText:
 #define selectAll lc(A)
 #define leftWithSelection ls(LEFT)
 #define rightWithSelection ls(RIGHT)
 #define moveCaretToPreviousWordWithSelection lc(ls(LEFT))
 #define moveCaretToNextWordWithSelection lc(ls(RIGHT))
 #define moveCaretToLineStartWithSelection ls(HOME)
 #define moveCaretToLineEndWithSelection ls(END)
 #define upWithSelection ls(UP)
 #define downWithSelection ls(DOWN)
 #define moveCaretToCodeBlockStartWithSelection lc(ls(LBKT))
 #define moveCaretToCodeBlockEndWithSelection lc(ls(RBKT))
 #define moveCaretToPageTopWithSelection lc(ls(PG_UP))
 #define moveCaretToPageBottomWithSelection lc(ls(PG_DN))
 #define pageUpWithSelection ls(PG_UP)
 #define pageDownWithSelection ls(PG_DN)
 #define moveCaretToTextStartWithSelection lc(ls(HOME))
 #define moveCaretToTextEndWithSelection lc(ls(END))
 #define extendSelection lc(W)
 #define shrinkSelection lc(ls(W))
  
//  codeFolding:
 #define expand lc(KP_PLUS)
 #define collapse lc(KP_MINUS)
 #define expandRecursively lc(la(KP_PLUS))
 #define collapseRecursively lc(la(KP_MINUS))
 #define expandAll lc(ls(KP_PLUS))
 #define collapseAll lc(ls(KP_MINUS))
 #define foldSelection lc(DOT)
  
//  multipleCaretsAndSelectionRanges:
//  #define addRemoveCaret la(ls(MBTN1))
 #define toggleColumnSelectionMode la(ls(INS))
 #define cloneCaretAbove lc(rc(UP))
 #define cloneCaretBelow lc(rc(DOWN))
 #define addCaretToEachLineInSelection la(ls(G))
 #define addSelectionForNextOccurrence la(J)
 #define selectAllOccurrences lc(la(ls(J)))
 #define deselectLastOccurrence la(ls(J))
//  #define createRectangularSelection la(ls(MBTN2))
//  #define dragToCreateRectangularSelection la(MBTN1)
//  #define dragToCreateMultipleRectangularSelections lc(la(ls(MBTN1)))
  
//  codingAssistance:
 #define showIntentionActions la(ENTER)
 #define basicCompletion lc(SPACE)
 #define typeMatchingCompletion lc(ls(SPACE))
 #define secondBasicCompletion lc(la(SPACE))
 #define completeCurrentStatement lc(ls(ENTER))
 #define reformatCode lc(la(L))
 #define parameterInfo lc(P)
 #define quickDocumentation lc(Q)
 #define moveStatementUp lc(ls(UP))
 #define moveStatementDown lc(ls(DOWN))
 #define moveElementLeft lc(la(ls(LEFT)))
 #define moveStatementRight lc(la(ls(RIGHT)))
 #define moveLineUp la(ls(UP))
 #define moveLineDown la(ls(DOWN))
 #define commentWithLineComment lc(SLASH)
 #define commentWithBlockComment lc(ls(SLASH))
 #define surroundWith lc(la(T))
 #define generate la(INS)
  
//  contextNavigation:
 #define nextMethod la(DOWN)
 #define previousMethod la(UP)
 #define goToLineColumn lc(G)
 #define switcher lc(TAB)
 #define selectIn la(F1)
 #define recentFiles lc(E)
 #define lastEditLocation lc(ls(BKSPC))
 #define back lc(la(LEFT))
 #define forward lc(la(RIGHT))
 #define selectNextTab la(RIGHT)
 #define selectPreviousTab la(LEFT)
 #define toggleAnonymousBookmark F11
//  #define toggleBookmarkWithDigit lc(ls(comJetbrainsWebhelpShortcutteryShortcutsKeyCustom1076e435))
 #define toggleBookmarkWithMnemonic lc(F11)
 #define showAllBookmarks ls(F11)
//  #define goToBookmarkWithDigit lc(comJetbrainsWebhelpShortcutteryShortcutsKeyCustom22a3022d)
 #define showMnemonicBookmarks lc(ls(F11))
 #define showBookmarksWindow la(N2)
 #define showStructureWindow la(N7)
 #define showFindWindow la(N3)
 #define nextOccurrence lc(la(DOWN))
 #define previousOccurrence lc(la(UP))
  
//  findEverything:
 #define searchEverywhere ls(rs(N2))
 #define find lc(F)
 #define findNextMoveToNextOccurrence F3
 #define findPreviousMoveToPreviousOccurrence ls(F3)
 #define replace lc(R)
 #define findInFiles lc(ls(F))
 #define replaceInFiles lc(ls(R))
 #define nextOccurrenceOfTheWordAtCaret lc(F3)
 #define goToFile lc(ls(N))
 #define fileStructure lc(F12)
 #define goToSymbol lc(la(ls(N)))
 #define findAction lc(ls(A))
  
// navigateFromSymbols:
 #define findUsages la(F7)
 #define goToDeclarationOrUsages lc(B)
 #define goToTypeDeclaration lc(ls(B))
 #define showUsages lc(la(F7))
 #define goToSuperMethod lc(U)
 #define goToImplementations lc(la(B))
 #define goToTest lc(ls(T))
 #define highlightUsagesInFile lc(ls(F7))
  
//  codeAnalysis:
 #define showIntentionActions la(ENTER)
 #define errorDescription lc(F1)
 #define nextHighlightedError F2
 #define previousHighlightedError ls(F2)
 #define runInspectionByName lc(la(ls(I)))
 #define showProblemsWindow la(N6)
  
//  runAndDebug:
 #define runAnything lc(rc(N0))
 #define runContextConfiguration ls(F10)
 #define run la(ls(F10))
 #define debugContextConfiguration ls(F9)
 #define debug la(ls(F9))
 #define attachToProcess lc(la(F5))
 #define stop lc(F2)
 #define resumeProgram F9
 #define stopBackgroundProcesses lc(ls(F2))
 #define stepOver F8
 #define forceStepOver la(ls(F8))
 #define stepInto F7
 #define smartStepInto ls(F7)
 #define forceStepInto la(ls(F7))
 #define stepOut ls(F8)
 #define runToCursor la(F9)
 #define forceRunToCursor lc(la(F9))
 #define showExecutionPoint la(F10)
 #define evaluateExpression la(F8)
 #define quickEvaluateExpression lc(la(F8))
 #define toggleLineBreakpoint lc(F8)
 #define toggleTemporaryLineBreakpoint lc(la(ls(F8)))
 #define viewBreakpoints lc(ls(F8))
 #define editBreakpoint lc(ls(F8))
 #define showRunWindow la(N4)
 #define showDebugWindow la(N5)
 #define showServicesWindow la(N8)
  
//  refactorings:
 #define refactorThis lc(la(ls(T)))
 #define rename ls(F6)
 #define changeSignature lc(F6)
 #define inline lc(la(N))
 #define move F6
 #define extractMethod lc(la(M))
 #define introduceField lc(la(F))
 #define introduceParameter lc(la(P))
 #define introduceVariable lc(la(V))
 #define safeDelete la(DEL)
  
//  globalVCSActions:
 #define vcsOperationsPopup la(GRV)
 #define commit lc(K)
 #define updateProject lc(T)
 #define rollback lc(la(Z))
 #define push lc(ls(K))
 #define nextChange lc(la(ls(DOWN)))
 #define previousChange lc(la(ls(UP)))
 #define showVersionControlWindow la(N9)
 #define showCommitWindow la(N0)
  
//  differencesViewer:
 #define showDiff lc(D)
 #define compareFiles lc(D)
 #define nextDifference F7
 #define previousDifference ls(F7)
 #define acceptLeftSide lc(la(R))
 #define acceptRightSide lc(la(A))
 #define selectOppositeDiffPane lc(ls(TAB))
 #define showDiffSettingsPopup lc(ls(D))
  
//  toolWindows:
 #define hideActiveToolWindow ls(ESC)
 #define hideAllToolWindows lc(ls(F12))
 #define jumpToLastToolWindow F12
 #define stretchToLeft lc(la(ls(LEFT)))
 #define stretchToRight lc(la(ls(RIGHT)))
 #define stretchToTop lc(la(ls(UP)))
 #define stretchToBottom lc(la(ls(DOWN)))
 #define showProjectWindow la(N1)
 #define showBookmarksWindow la(N2)
 #define showFindWindow la(N3)
 #define showRunWindow la(N4)
 #define showDebugWindow la(N5)
 #define showProblemsWindow la(N6)
 #define showStructureWindow la(N7)
 #define ShowServicesWindow la(N8)
 #define ShowVersionControl window la(N9)
 #define ShowCommitWindow la(N0)
 #define ShowTerminalWindow la(F12)