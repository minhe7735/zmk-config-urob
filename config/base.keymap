#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#include "../zmk-nodefree-config/helper.h"

#define DEF 0
#define SYM 1
#define NUM 2
#define FN 3
#define GENSHIN 4
// #define MOUSE 5

#include "mouse.dtsi"
#include "combos.dtsi"  // requires layer aliases
#include "extra_keys.h"

#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_cml, &cml, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_smd, &smd, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_amr, &amr, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};


// ctrl move left
ZMK_BEHAVIOR(cml, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&macro_press &mmv MOVE_LEFT &kp RCTRL>
    , <&macro_pause_for_release>
    , <&macro_release &mmv MOVE_LEFT &kp RCTRL>
    ;
)

// shift move down
ZMK_BEHAVIOR(smd, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&macro_press &mmv MOVE_DOWN &kp RSHFT>
    , <&macro_pause_for_release>
    , <&macro_release &mmv MOVE_DOWN &kp RSHFT>
    ;
)

// alt move right
ZMK_BEHAVIOR(amr, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&macro_press &mmv MOVE_RIGHT &kp RALT>
    , <&macro_pause_for_release>
    , <&macro_release &mmv MOVE_RIGHT &kp RALT>
    ;
)

// tap: kp | hold: move mouse
ZMK_BEHAVIOR(mt_mouse, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mmv>, <&kp>;
)


// tap: kp | hold: mouse scroll
ZMK_BEHAVIOR(mt_wheel, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mwh>, <&kp>;
)

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)


/* Keymap */

ZMK_LAYER(base,
    X_LT     &kp Q          &kp W          &kp F           &kp P           &kp B             X_MT     &mt_wheel SCROLL_UP J      &mt_wheel SCROLL_LEFT L       &mt_mouse MOVE_UP U      &mt_wheel SCROLL_RIGHT Y    &kp SEMI      X_RT
    X_LM     &hml LGUI A    &hml LALT R    &hml LSHFT S    &hml LCTRL T    &kp G             X_MM     &mt_wheel SCROLL_DOWN M    &hmr_cml 0 N                  &hmr_smd 0 E             &hmr_amr 0 I                &hml LGUI O   X_RM
    X_LB     &kp Z          &kp X          &kp C           &kp D           &kp V             X_MB     &kp K                      &kp H                         &kp COMMA                &kp DOT                     &kp FSLH      X_RB
    X_LH                                                   &smart_shft     &lt SYM SPACE     X_MH     &lt NUM BACKSPACE          &mt LS(LC(LEFT_ALT)) ENTER                                                                       X_RH
)

ZMK_LAYER(sym,
    X_LT     &kp EXCL       &kp AT        &kp LEFT_BRACE          &kp RIGHT_BRACE          &kp PIPE         X_MT     &kp GRAVE    &kp TILDE    &kp LESS_THAN    &kp GREATER_THAN    &kp BACKSLASH         X_RT
    X_LM     &kp HASH       &kp DOLLAR    &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS    &kp COLON        X_MM     &kp PLUS     &kp MINUS    &kp SLASH        &kp ASTRK           &kp SINGLE_QUOTE      X_RM
    X_LB     &kp PERCENT    &kp CARET     &kp LEFT_BRACKET        &kp RIGHT_BRACKET        &kp QUESTION     X_MB     &kp AMPS     &kp EQUAL    &kp UNDER        &kp PERIOD          &kp DOUBLE_QUOTES     X_RB
    X_LH                                                          XXX                      ___              X_MH     ___          XXX                                                                     X_RH
)

ZMK_LAYER(num,
    X_LT     XXX        &kp N7          &kp N8           &kp N9           XXX               X_MT     XXX                   &kp LS(LA(LC(LEFT)))    &kp UP      &kp LS(LA(LC(RIGHT)))    XXX                      X_RT
    X_LM     &kp LGUI   &hml LALT N4    &hml LSHFT N5    &hml LCTRL N6    XXX               X_MM     &kp LS(LA(LC(UP)))    &kp LEFT                &kp DOWN    &kp RIGHT                &kp LS(LA(LC(DOWN)))     X_RM
    X_LB     XXX        &kp N1          &kp N2           &kp N3           &kp LC(MINUS)     X_MB     &kp LC(EQUAL)         &kp HOME                ___         &kp END                  XXX                      X_RB
    &kp DOT                                              &kp N0           ___               X_MH     ___                   XXX                                                                                   X_RH
)

ZMK_LAYER(fn,
    &kp F1        &kp F2          &kp F3          &kp F4          &kp F5          &kp F6                X_MT     &kp F7    &kp F8    &kp F9    &kp F10   &kp F11     &kp F12
    &bt BT_CLR    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4          X_MM     XXX       XXX       XXX       XXX       XXX         X_RM
    X_LB          XXX             XXX             XXX             XXX             &ext_power EP_OFF     X_MB     XXX       XXX       XXX       XXX       XXX         X_RB
    X_LH                                                          XXX             XXX                   X_MH     XXX       XXX                                       X_RH
)

ZMK_LAYER(genshin,
    &kp ESCAPE    &kp Q     &kp W     &kp E     &kp R        &kp T      X_MT     XXX    XXX    XXX    XXX    XXX     X_RT
    &kp LCTRL     &kp A     &kp S     &kp D     &kp F        &kp X      X_MM     XXX    XXX    XXX    XXX    XXX     X_RM
    &kp LSHIFT    &kp N1    &kp N2    &kp N3    &kp N4       &kp N5     X_MB     XXX    XXX    XXX    XXX    XXX     X_RB
    &sk LALT                                    &kp SPACE    &kp M      X_MH     XXX    XXX                          X_RH
)

// ZMK_LAYER(mouse,
//     X_LT     &LMT1    &LMT2     &LMT3     &LMT4     &LMT5      X_MT     &RMT1     &RMT2     &RMT3     &RMT4     &RMT5      X_RT
//     X_LM     &LMT6    &LMT7     &LMT8     &LMT9     &LMT10     X_MM     &RMT6     &RMT7     &RMT8     &RMT9     &RMT10     X_RM
//     X_LB     &LMT11   &LMT12    &LMT13    &LMT14    &LMT15     X_MB     &RMT11    &RMT12    &RMT13    &RMT14    &RMT15     X_RB
//     X_LH                         ___           ___             X_MH     &LMT_TEST         U_BTN1                                                    U_BTN3
// )

/* vim: set ft=c tw=174: */
