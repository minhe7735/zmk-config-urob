&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_cml, &cml, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_smd, &smd, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_amr, &amr, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hmr_mouse_tp, &kp, &sl, KEYS_L THUMBS)

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};


// ctrl move left
ZMK_BEHAVIOR(cml, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&macro_press &mmv MOVE_LEFT &kp RCTRL>
    , <&macro_pause_for_release>
    , <&macro_release &mmv MOVE_LEFT &kp RCTRL>
    ;
)

// shift move down
ZMK_BEHAVIOR(smd, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&macro_press &mmv MOVE_DOWN &kp RSHFT>
    , <&macro_pause_for_release>
    , <&macro_release &mmv MOVE_DOWN &kp RSHFT>
    ;
)

// alt move right
ZMK_BEHAVIOR(amr, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&macro_press &mmv MOVE_RIGHT &kp RALT>
    , <&macro_pause_for_release>
    , <&macro_release &mmv MOVE_RIGHT &kp RALT>
    ;
)

// tap: kp | hold: move mouse
ZMK_BEHAVIOR(mt_mouse, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mmv>, <&kp>;
)


// tap: kp | hold: mouse scroll
ZMK_BEHAVIOR(mt_wheel, hold_tap,
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mwh>, <&kp>;
)

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)


//mouse tp mod morphs
ZMK_BEHAVIOR(LMT1_morph, mod_morph,
    bindings = <&LMT1>, <&LMT4>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(LMT2_morph, mod_morph,
    bindings = <&LMT2>, <&LMT5>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(LMT3_morph, mod_morph,
    bindings = <&LMT3>, <&LMT6>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(LMT13_morph, mod_morph,
    bindings = <&LMT13>, <&LMT10>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(LMT14_morph, mod_morph,
    bindings = <&LMT14>, <&LMT11>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(LMT15_morph, mod_morph,
    bindings = <&LMT15>, <&LMT12>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


ZMK_BEHAVIOR(RMT1_morph, mod_morph,
    bindings = <&RMT1>, <&RMT2>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(RMT5_morph, mod_morph,
    bindings = <&RMT5>, <&RMT4>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(RMT6_morph, mod_morph,
    bindings = <&RMT6>, <&RMT7>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(RMT10_morph, mod_morph,
    bindings = <&RMT10>, <&RMT9>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(RMT11_morph, mod_morph,
    bindings = <&RMT11>, <&RMT12>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_BEHAVIOR(RMT15_morph, mod_morph,
    bindings = <&RMT15>, <&RMT14>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)