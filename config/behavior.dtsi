&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_cml, &cml, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_smd, &smd, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hmr_amr, &amr, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hmr_mouse_tp, &kp, &sl, KEYS_L THUMBS)

/* Caps-word */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1441
    /delete-property/ ignore-modifiers;
};

/*mod move*/

#define MAKE_MM(NAME, MOVE, MOD) \
    ZMK_BEHAVIOR(NAME, macro, \
        wait-ms = <0>; \
        tap-ms = <0>; \
        bindings = <&macro_press &mmv MOVE &kp MOD>, \
        <&macro_pause_for_release>, \
        <&macro_release &mmv MOVE &kp MOD>; \
    )

MAKE_MM(cml, MOVE_LEFT, RCTRL)
MAKE_MM(smd, MOVE_DOWN, RSHFT)
MAKE_MM(amr, MOVE_RIGHT, RALT)

#define MAKE_MT(NAME, HOLD, TAP) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "tap-preferred"; \
        tapping-term-ms = <200>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        bindings = <HOLD>, <TAP>; \
    )

MAKE_MT(mt_mouse, &mmv, &kp) // hold: move, tap: key
MAKE_MT(mt_wheel, &mwh, &kp) // hold: scroll, tap: key

// Alt+Tab swapper, requires PR #1366
ZMK_BEHAVIOR(swapper, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)

/*points for mouse tp*/
#define MAKE_MMTP(NAME, POINT1, POINT2) \
    ZMK_BEHAVIOR(NAME, , mod_morph, \
        bindings = <POINT1>, <POINT2>; \
        mods = <(MOD_LSFT|MOD_RSFT)>; \
    )

MAKE_MMTP(LMT1_morph, &LMT1, &LMT4)
MAKE_MMTP(LMT2_morph, &LMT2, &LMT5)
MAKE_MMTP(LMT3_morph, &LMT3, &LMT6)
MAKE_MMTP(LMT13_morph, &LMT13, &LMT10)
MAKE_MMTP(LMT14_morph, &LMT14, &LMT11)
MAKE_MMTP(LMT15_morph, &LMT15, &LMT12)

MAKE_MMTP(RMT1_morph, &RMT1, &RMT2)
MAKE_MMTP(RMT5_morph, &RMT5, &RMT4)
MAKE_MMTP(RMT6_morph, &RMT6, &RMT7)
MAKE_MMTP(RMT10_morph, &RMT10, &RMT9)
MAKE_MMTP(RMT11_morph, &RMT11, &RMT12)
MAKE_MMTP(RMT15_morph, &RMT15, &RMT14)